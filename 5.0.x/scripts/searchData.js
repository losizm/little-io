pages = [{"l":"api/index.html","n":"little-io","t":"little-io","d":"","k":"static"},
{"l":"api/little/io.html","n":"little.io","t":"package little.io","d":"little/io","k":"package"},
{"l":"api/little/io/AcceptAnyFile$.html","n":"AcceptAnyFile","t":"object AcceptAnyFile extends FileFilter","d":"little/io/AcceptAnyFile$","k":"object"},
{"l":"api/little/io/AcceptAnyFile$.html","n":"accept","t":"def accept(file: File): Boolean","d":"little/io/AcceptAnyFile$","k":"def"},
{"l":"api/little/io/BufferSize.html","n":"BufferSize","t":"class BufferSize(value: Int)","d":"little/io/BufferSize","k":"class"},
{"l":"api/little/io/Compressor$.html","n":"Compressor","t":"object Compressor","d":"little/io/Compressor$","k":"object"},
{"l":"api/little/io/Compressor$.html","n":"deflate","t":"def deflate(in: File, out: File)(using bufferSize: BufferSize): Unit","d":"little/io/Compressor$","k":"def"},
{"l":"api/little/io/Compressor$.html","n":"deflate","t":"def deflate(in: Path, out: Path)(using bufferSize: BufferSize): Unit","d":"little/io/Compressor$","k":"def"},
{"l":"api/little/io/Compressor$.html","n":"deflate","t":"def deflate(in: InputStream, out: OutputStream)(using bufferSize: BufferSize): Unit","d":"little/io/Compressor$","k":"def"},
{"l":"api/little/io/Compressor$.html","n":"gunzip","t":"def gunzip(in: File, out: File)(using bufferSize: BufferSize): Unit","d":"little/io/Compressor$","k":"def"},
{"l":"api/little/io/Compressor$.html","n":"gunzip","t":"def gunzip(in: Path, out: Path)(using bufferSize: BufferSize): Unit","d":"little/io/Compressor$","k":"def"},
{"l":"api/little/io/Compressor$.html","n":"gunzip","t":"def gunzip(in: InputStream, out: OutputStream)(using bufferSize: BufferSize): Unit","d":"little/io/Compressor$","k":"def"},
{"l":"api/little/io/Compressor$.html","n":"gzip","t":"def gzip(in: File, out: File)(using bufferSize: BufferSize): Unit","d":"little/io/Compressor$","k":"def"},
{"l":"api/little/io/Compressor$.html","n":"gzip","t":"def gzip(in: Path, out: Path)(using bufferSize: BufferSize): Unit","d":"little/io/Compressor$","k":"def"},
{"l":"api/little/io/Compressor$.html","n":"gzip","t":"def gzip(in: InputStream, out: OutputStream)(using bufferSize: BufferSize): Unit","d":"little/io/Compressor$","k":"def"},
{"l":"api/little/io/Compressor$.html","n":"inflate","t":"def inflate(in: File, out: File)(using bufferSize: BufferSize): Unit","d":"little/io/Compressor$","k":"def"},
{"l":"api/little/io/Compressor$.html","n":"inflate","t":"def inflate(in: Path, out: Path)(using bufferSize: BufferSize): Unit","d":"little/io/Compressor$","k":"def"},
{"l":"api/little/io/Compressor$.html","n":"inflate","t":"def inflate(in: InputStream, out: OutputStream)(using bufferSize: BufferSize): Unit","d":"little/io/Compressor$","k":"def"},
{"l":"api/little/io/Compressor$.html","n":"unzip","t":"def unzip(in: File, out: File)(using filter: FileFilter): Unit","d":"little/io/Compressor$","k":"def"},
{"l":"api/little/io/Compressor$.html","n":"unzip","t":"def unzip(in: Path, out: Path)(using matcher: PathMatcher): Unit","d":"little/io/Compressor$","k":"def"},
{"l":"api/little/io/Compressor$.html","n":"zip","t":"def zip(in: File, out: File)(using filter: FileFilter): Unit","d":"little/io/Compressor$","k":"def"},
{"l":"api/little/io/Compressor$.html","n":"zip","t":"def zip(in: Path, out: Path)(using matcher: PathMatcher): Unit","d":"little/io/Compressor$","k":"def"},
{"l":"api/little/io/FileVisitEvent.html","n":"FileVisitEvent","t":"enum FileVisitEvent","d":"little/io/FileVisitEvent","k":"enum"},
{"l":"api/little/io/FileVisitEvent$$PreVisitDirectory.html","n":"PreVisitDirectory","t":"case PreVisitDirectory(directory: Path, attributes: BasicFileAttributes) extends FileVisitEvent","d":"little/io/FileVisitEvent","k":"case"},
{"l":"api/little/io/FileVisitEvent$$PostVisitDirectory.html","n":"PostVisitDirectory","t":"case PostVisitDirectory(directory: Path, exception: Option[IOException]) extends FileVisitEvent","d":"little/io/FileVisitEvent","k":"case"},
{"l":"api/little/io/FileVisitEvent$$VisitFile.html","n":"VisitFile","t":"case VisitFile(file: Path, attributes: BasicFileAttributes) extends FileVisitEvent","d":"little/io/FileVisitEvent","k":"case"},
{"l":"api/little/io/FileVisitEvent$$VisitFileFailed.html","n":"VisitFileFailed","t":"case VisitFileFailed(file: Path, exception: IOException) extends FileVisitEvent","d":"little/io/FileVisitEvent","k":"case"},
{"l":"api/little/io/FileVisitEvent$$PreVisitDirectory.html","n":"PreVisitDirectory","t":"case PreVisitDirectory(directory: Path, attributes: BasicFileAttributes) extends FileVisitEvent","d":"little/io/FileVisitEvent$$PreVisitDirectory","k":"case"},
{"l":"api/little/io/FileVisitEvent$$PostVisitDirectory.html","n":"PostVisitDirectory","t":"case PostVisitDirectory(directory: Path, exception: Option[IOException]) extends FileVisitEvent","d":"little/io/FileVisitEvent$$PostVisitDirectory","k":"case"},
{"l":"api/little/io/FileVisitEvent$$VisitFile.html","n":"VisitFile","t":"case VisitFile(file: Path, attributes: BasicFileAttributes) extends FileVisitEvent","d":"little/io/FileVisitEvent$$VisitFile","k":"case"},
{"l":"api/little/io/FileVisitEvent$$VisitFileFailed.html","n":"VisitFileFailed","t":"case VisitFileFailed(file: Path, exception: IOException) extends FileVisitEvent","d":"little/io/FileVisitEvent$$VisitFileFailed","k":"case"},
{"l":"api/little/io/Implicits$.html","n":"Implicits","t":"object Implicits","d":"little/io/Implicits$","k":"object"},
{"l":"api/little/io/Implicits$.html","n":"bufferSize","t":"val bufferSize: BufferSize","d":"little/io/Implicits$","k":"val"},
{"l":"api/little/io/Implicits$$FileType.html","n":"FileType","t":"class FileType(file: File) extends AnyVal","d":"little/io/Implicits$$FileType","k":"class"},
{"l":"api/little/io/Implicits$$FileType.html","n":"/","t":"def /(child: String): File","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"<<","t":"def <<(bytes: Array[Byte]): File","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"<<","t":"def <<(chars: Array[Char]): File","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"<<","t":"def <<(chars: CharSequence): File","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"<<","t":"def <<(in: InputStream)(using bufferSize: BufferSize): File","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"<<","t":"def <<(in: Reader)(using bufferSize: BufferSize): File","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"filterLines","t":"def filterLines(p: String => Boolean): Seq[String]","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"flatMapFiles","t":"def flatMapFiles[T](f: File => Iterable[T]): Seq[T]","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"flatMapLines","t":"def flatMapLines[T](f: String => Iterable[T]): Seq[T]","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"foldFiles","t":"def foldFiles[T](init: T)(op: (T, File) => T): T","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"foldLines","t":"def foldLines[T](init: T)(op: (T, String) => T): T","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"forEachFile","t":"def forEachFile(f: File => Unit): Unit","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"forEachLine","t":"def forEachLine(f: String => Unit): Unit","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"getBytes","t":"def getBytes(): Array[Byte]","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"getLines","t":"def getLines(): Seq[String]","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"getText","t":"def getText(): String","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"mapFiles","t":"def mapFiles[T](f: File => T): Seq[T]","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"mapLines","t":"def mapLines[T](f: String => T): Seq[T]","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"setBytes","t":"def setBytes(bytes: Array[Byte]): Unit","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"setText","t":"def setText(text: String): Unit","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"withInputStream","t":"def withInputStream[T](f: InputStream => T): T","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"withOutputStream","t":"def withOutputStream[T](f: OutputStream => T): T","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"withOutputStream","t":"def withOutputStream[T](append: Boolean)(f: OutputStream => T): T","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"withPrintWriter","t":"def withPrintWriter[T](f: PrintWriter => T): T","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"withPrintWriter","t":"def withPrintWriter[T](append: Boolean)(f: PrintWriter => T): T","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"withRandomAccess","t":"def withRandomAccess[T](mode: String)(f: RandomAccessFile => T): T","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"withReader","t":"def withReader[T](f: BufferedReader => T): T","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"withWriter","t":"def withWriter[T](f: BufferedWriter => T): T","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$FileType.html","n":"withWriter","t":"def withWriter[T](append: Boolean)(f: BufferedWriter => T): T","d":"little/io/Implicits$$FileType","k":"def"},
{"l":"api/little/io/Implicits$$InputStreamType.html","n":"InputStreamType","t":"class InputStreamType[T <: InputStream](in: T) extends AnyVal","d":"little/io/Implicits$$InputStreamType","k":"class"},
{"l":"api/little/io/Implicits$$InputStreamType.html","n":"getBytes","t":"def getBytes(): Array[Byte]","d":"little/io/Implicits$$InputStreamType","k":"def"},
{"l":"api/little/io/Implicits$$IoByteArrayType.html","n":"IoByteArrayType","t":"class IoByteArrayType(bytes: Array[Byte]) extends AnyVal","d":"little/io/Implicits$$IoByteArrayType","k":"class"},
{"l":"api/little/io/Implicits$$IoByteArrayType.html","n":"toBase64Decoded","t":"def toBase64Decoded: Array[Byte]","d":"little/io/Implicits$$IoByteArrayType","k":"def"},
{"l":"api/little/io/Implicits$$IoByteArrayType.html","n":"toBase64Encoded","t":"def toBase64Encoded: Array[Byte]","d":"little/io/Implicits$$IoByteArrayType","k":"def"},
{"l":"api/little/io/Implicits$$IoStringType.html","n":"IoStringType","t":"class IoStringType(s: String) extends AnyVal","d":"little/io/Implicits$$IoStringType","k":"class"},
{"l":"api/little/io/Implicits$$IoStringType.html","n":"toFile","t":"def toFile: File","d":"little/io/Implicits$$IoStringType","k":"def"},
{"l":"api/little/io/Implicits$$IoStringType.html","n":"toPath","t":"def toPath: Path","d":"little/io/Implicits$$IoStringType","k":"def"},
{"l":"api/little/io/Implicits$$IoStringType.html","n":"toUrlDecoded","t":"def toUrlDecoded: String","d":"little/io/Implicits$$IoStringType","k":"def"},
{"l":"api/little/io/Implicits$$IoStringType.html","n":"toUrlDecoded","t":"def toUrlDecoded(charset: String): String","d":"little/io/Implicits$$IoStringType","k":"def"},
{"l":"api/little/io/Implicits$$IoStringType.html","n":"toUrlEncoded","t":"def toUrlEncoded: String","d":"little/io/Implicits$$IoStringType","k":"def"},
{"l":"api/little/io/Implicits$$IoStringType.html","n":"toUrlEncoded","t":"def toUrlEncoded(charset: String): String","d":"little/io/Implicits$$IoStringType","k":"def"},
{"l":"api/little/io/Implicits$$OutputStreamType.html","n":"OutputStreamType","t":"class OutputStreamType[T <: OutputStream](out: T) extends AnyVal","d":"little/io/Implicits$$OutputStreamType","k":"class"},
{"l":"api/little/io/Implicits$$OutputStreamType.html","n":"<<","t":"def <<(bytes: Array[Byte]): T","d":"little/io/Implicits$$OutputStreamType","k":"def"},
{"l":"api/little/io/Implicits$$OutputStreamType.html","n":"<<","t":"def <<(in: InputStream)(using bufferSize: BufferSize): T","d":"little/io/Implicits$$OutputStreamType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"PathType","t":"class PathType(path: Path) extends AnyVal","d":"little/io/Implicits$$PathType","k":"class"},
{"l":"api/little/io/Implicits$$PathType.html","n":"/","t":"def /(child: String): Path","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"<<","t":"def <<(bytes: Array[Byte]): Path","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"<<","t":"def <<(chars: Array[Char]): Path","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"<<","t":"def <<(chars: CharSequence): Path","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"<<","t":"def <<(in: InputStream)(using bufferSize: BufferSize): Path","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"<<","t":"def <<(in: Reader)(using bufferSize: BufferSize): Path","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"filterLines","t":"def filterLines(p: String => Boolean): Seq[String]","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"flatMapFiles","t":"def flatMapFiles[T](f: Path => Iterable[T]): Seq[T]","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"flatMapLines","t":"def flatMapLines[T](f: String => Iterable[T]): Seq[T]","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"foldFiles","t":"def foldFiles[T](init: T)(op: (T, Path) => T): T","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"foldLines","t":"def foldLines[T](init: T)(op: (T, String) => T): T","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"forEachFile","t":"def forEachFile(f: Path => Unit): Unit","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"forEachLine","t":"def forEachLine(f: String => Unit): Unit","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"forFiles","t":"def forFiles(glob: String)(f: Path => Unit): Unit","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"getBytes","t":"def getBytes(): Array[Byte]","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"getLines","t":"def getLines(): Seq[String]","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"getText","t":"def getText(): String","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"mapFiles","t":"def mapFiles[T](f: Path => T): Seq[T]","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"mapLines","t":"def mapLines[T](f: String => T): Seq[T]","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"setBytes","t":"def setBytes(bytes: Array[Byte]): Unit","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"setText","t":"def setText(text: String): Unit","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"withChannel","t":"def withChannel[T](options: OpenOption*)(f: FileChannel => T): T","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"withInputStream","t":"def withInputStream[T](options: OpenOption*)(f: InputStream => T): T","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"withOutputStream","t":"def withOutputStream[T](options: OpenOption*)(f: OutputStream => T): T","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"withPrintWriter","t":"def withPrintWriter[T](options: OpenOption*)(f: PrintWriter => T): T","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"withReader","t":"def withReader[T](options: OpenOption*)(f: BufferedReader => T): T","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"withVisitor","t":"def withVisitor(visitor: PartialFunction[FileVisitEvent, FileVisitResult]): Unit","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"withWatcher","t":"def withWatcher(events: Kind[_]*)(watcher: WatchEvent[_] => Unit): WatchHandle","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$PathType.html","n":"withWriter","t":"def withWriter[T](options: OpenOption*)(f: BufferedWriter => T): T","d":"little/io/Implicits$$PathType","k":"def"},
{"l":"api/little/io/Implicits$$ReaderType.html","n":"ReaderType","t":"class ReaderType[T <: Reader](reader: T) extends AnyVal","d":"little/io/Implicits$$ReaderType","k":"class"},
{"l":"api/little/io/Implicits$$ReaderType.html","n":"filterLines","t":"def filterLines(p: String => Boolean): Seq[String]","d":"little/io/Implicits$$ReaderType","k":"def"},
{"l":"api/little/io/Implicits$$ReaderType.html","n":"flatMapLines","t":"def flatMapLines[T](f: String => Iterable[T]): Seq[T]","d":"little/io/Implicits$$ReaderType","k":"def"},
{"l":"api/little/io/Implicits$$ReaderType.html","n":"foldLines","t":"def foldLines[T](init: T)(op: (T, String) => T): T","d":"little/io/Implicits$$ReaderType","k":"def"},
{"l":"api/little/io/Implicits$$ReaderType.html","n":"forEachLine","t":"def forEachLine(f: String => Unit): Unit","d":"little/io/Implicits$$ReaderType","k":"def"},
{"l":"api/little/io/Implicits$$ReaderType.html","n":"getLines","t":"def getLines(): Seq[String]","d":"little/io/Implicits$$ReaderType","k":"def"},
{"l":"api/little/io/Implicits$$ReaderType.html","n":"getText","t":"def getText(): String","d":"little/io/Implicits$$ReaderType","k":"def"},
{"l":"api/little/io/Implicits$$ReaderType.html","n":"mapLines","t":"def mapLines[T](f: String => T): Seq[T]","d":"little/io/Implicits$$ReaderType","k":"def"},
{"l":"api/little/io/Implicits$$WriterType.html","n":"WriterType","t":"class WriterType[T <: Writer](writer: T) extends AnyVal","d":"little/io/Implicits$$WriterType","k":"class"},
{"l":"api/little/io/Implicits$$WriterType.html","n":"<<","t":"def <<(chars: Array[Char]): T","d":"little/io/Implicits$$WriterType","k":"def"},
{"l":"api/little/io/Implicits$$WriterType.html","n":"<<","t":"def <<(chars: CharSequence): T","d":"little/io/Implicits$$WriterType","k":"def"},
{"l":"api/little/io/Implicits$$WriterType.html","n":"<<","t":"def <<(in: Reader)(using bufferSize: BufferSize): T","d":"little/io/Implicits$$WriterType","k":"def"},
{"l":"api/little/io/Implicits$$WriterType.html","n":"writeLine","t":"def writeLine(text: String): Unit","d":"little/io/Implicits$$WriterType","k":"def"},
{"l":"api/little/io/MatchAnyPath$.html","n":"MatchAnyPath","t":"object MatchAnyPath extends PathMatcher","d":"little/io/MatchAnyPath$","k":"object"},
{"l":"api/little/io/MatchAnyPath$.html","n":"matches","t":"def matches(path: Path): Boolean","d":"little/io/MatchAnyPath$","k":"def"},
{"l":"api/little/io/WatchHandle.html","n":"WatchHandle","t":"class WatchHandle","d":"little/io/WatchHandle","k":"class"},
{"l":"api/little/io/WatchHandle.html","n":"close","t":"def close(): Unit","d":"little/io/WatchHandle","k":"def"},
{"l":"api/little/io/WatchHandle.html","n":"isClosed","t":"def isClosed: Boolean","d":"little/io/WatchHandle","k":"def"},
{"l":"docs/index.html","n":"little-io","t":"little-io","d":"","k":"static"}];